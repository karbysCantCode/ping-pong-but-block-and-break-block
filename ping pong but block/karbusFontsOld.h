/*HERERERER

#pragma once
#include "SDL.h"
#include <iostream>



class KBF_Font {
private:
	int fontX = 0;
	int fontY = 0;
	bool** pixelData = nullptr;


	// #59235893 karbyss dms

	struct basicFont {
		const int x = 4;
		const int y = 7;
		const bool letters[94][28] = {
			{0},
			{0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,0,0,0,1,0,0},
			{0},{0},
			{0,0,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,1,0,0,1,0,0},
			{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},
			{0,1,1,0,1,0,0,1,1,1,0,1,1,1,1,1,1,0,1,1,1,0,0,1,0,1,1,0}, //0
			{0,1,1,0,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,1,1,1,1},
			{0,1,1,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,1,1,1,1},
			{1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0},
			{0,0,1,1,0,1,0,1,1,0,0,1,1,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1},
			{1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0},
			{0,1,1,0,1,0,0,1,1,0,0,0,1,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0},
			{1,1,1,1,0,0,0,1,0,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,0,0},
			{0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,0},
			{0,1,1,0,1,0,0,1,1,0,0,1,0,1,1,1,0,0,0,1,1,0,0,1,0,1,1,0},//9
			{0},{0},{0},{0},{0},{0},{0},
			{0,1,1,0,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1}, // CAP A
			{1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0,1,0,0,1,1,0,0,1,1,1,1,0},
			{0,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,0,1,1,1},
			{1,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,0},
			{1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1},
			{1,1,1,1,1,0,0,0,1,0,0,0,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0},
			{1,1,1,1,1,0,0,0,1,0,0,0,1,0,1,1,1,0,0,1,1,0,0,1,1,1,1,1},
			{1,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1},
			{1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,1,1,1,1},
			{0,1,1,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1,0},
			{1,0,0,1,1,0,0,1,1,0,1,0,1,1,0,0,1,0,1,0,1,0,0,1,1,0,0,1},
			{1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,1,1,1},
			{1,0,0,1,1,1,0,1,1,0,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1},
			{1,0,0,1,1,1,0,1,1,1,0,1,1,0,1,1,1,0,1,1,1,0,0,1,1,0,0,1},
			{0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0},
			{1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,1,0,0,0,1,0,0,0},
			{1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,0,1,1,0,1},
			{1,1,1,1,1,0,0,1,1,0,0,1,1,1,1,1,1,1,0,0,1,0,1,0,1,0,0,1},
			{0,1,1,1,1,0,0,0,1,0,0,0,0,1,1,0,0,0,0,1,0,0,0,1,1,1,1,0},
			{1,1,1,1,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0,0,1,0,0},
			{1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0},
			{1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,1},
			{1,0,0,1,1,0,0,1,1,0,0,1,1,0,1,1,1,1,0,1,1,1,0,1,1,0,0,1},
			{1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,1,0,0,1,1,0,0,1,1,0,0,1},
			{1,0,0,1,1,0,0,1,1,0,0,1,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0},
			{1,1,1,1,0,0,0,1,0,0,1,0,0,1,0,0,1,0,0,0,1,0,0,0,1,1,1,1}, // CAP Z
			{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0},{0}
		};
	};
public:
	/*
	1 = basic font
	*/
/* HHHHHHHHHHHHHHHHHHHHHHHHHHHERE
	KBF_Font(int fontName) {
		switch (fontName)
		{
		case 1:
		{
			basicFont cFont;
			fontX = cFont.x;
			fontY = cFont.y;
			pixelData = new bool* [94];
			for (int i = 0; i < 94; ++i) {
				pixelData[i] = new bool[cFont.x * cFont.y];
				// Copy data from basicFont to pixelData
				for (int j = 0; j < cFont.x * cFont.y; ++j) {
					pixelData[i][j] = cFont.letters[i][j];
				}
			}
			break; // Add break statement here
		}
		default:
			break;
		}
	}

	~KBF_Font() {
		if (pixelData != nullptr) {
			for (int i = 0; i < 94; ++i) {
				delete[] pixelData[i];
			}
			delete[] pixelData;
		}
	}

	void KBF_RenderLetter(SDL_Renderer* renderer, char letter, int x, int y, int scale) {
		short intLetter = letter - ' '; // shift so SPACE = 0

		// to reference current letter value : letters[intLetter];

		//for (int i = 0; i < 28; ++i) {
		//	std::cout << pixelData[intLetter][i]<<'\n';
		//}

		//std::cout << '\n' << (char)(intLetter + 32);

		for (int row = 0; row < fontY; ++row) {
			for (int col = 0; col < fontX; ++col) {
				//std::cout << (row * fontX) + col << ',';

				if (pixelData[intLetter][(row * fontX) + col] && scale == 1) {
					SDL_RenderDrawPoint(renderer, col + x, row + y);
					continue;
				};

				if (pixelData[intLetter][(row * fontX) + col] && !(scale == 1)) {
					SDL_Rect rect = { x + (col * scale),
									  y + (row * scale),
									  scale,
									  scale };
					SDL_RenderFillRect(renderer, &rect);
				}
			}
		}
	}

	void KBF_RenderString(SDL_Renderer* renderer, std::string string, int x, int y, int scale) {
		size_t strLength = string.length();
		for (int i = 0; i < strLength;++i) {
			if (string[i] == ' ') continue;

			int currentX = x + (scale * (i * 5));

			KBF_RenderLetter(renderer, string[i], currentX, y, scale);
		}
	}

};

*/ // herer
